module PythagoreanTriplet exposing (triplets)


type alias Triplet =
    ( Int, Int, Int )


triplets : Int -> List Triplet
triplets n =
    -- Use a tail call optimized function instead of List functions
    -- because of the length of the last test that takes too long.
    -- Combining this with comparisons done with "x - y == 0" instead of "x == y"
    -- brings the running time from 35s down to 1s.
    validA n 1 []


validA n a accumTriplets =
    -- use a - n == 0 instead of a == n
    -- because the "==" code generated by elm for a number literal is much more optimized
    if a - n == 0 then
        List.reverse accumTriplets

    else
        validA n (a + 1) (validB n a (a + 1) accumTriplets)


validB n a b accumTriplets =
    -- use b - n == 0 instead of b == n
    -- because the "==" code generated by elm for a number literal is much more optimized
    if b - n == 0 then
        accumTriplets

    else if isValidTriplet n a b then
        validB n a (b + 1) (( a, b, n - a - b ) :: accumTriplets)

    else
        validB n a (b + 1) accumTriplets


isValidTriplet n a b =
    let
        c =
            n - a - b
    in
    -- use "... - ... == 0" instead of "... == ..."
    -- because the "==" code generated by elm for a number literal is much more optimized
    a * a + b * b - c * c == 0
