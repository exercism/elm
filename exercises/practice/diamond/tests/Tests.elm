module Tests exposing (tests)

import Diamond
import Expect
import Test exposing (Test, describe, skip, test)


tests : Test
tests =
    describe "Diamond"
        [ -- skip <|
          test "Degenerate case with a single 'A' row" <|
            \() ->
                Diamond.rows 'A'
                    |> Expect.equal "A"
        , skip <|
            test "Degenerate case with no row containing 3 distinct groups of spaces" <|
                \() ->
                    Diamond.rows 'B'
                        |> Expect.equal """_A_
B_B
_A_"""
        , skip <|
            test "Smallest non-degenerate case with odd diamond side length" <|
                \() ->
                    Diamond.rows 'C'
                        |> Expect.equal """__A__
_B_B_
C___C
_B_B_
__A__"""
        , skip <|
            test "Smallest non-degenerate case with even diamond side length" <|
                \() ->
                    Diamond.rows 'D'
                        |> Expect.equal """___A___
__B_B__
_C___C_
D_____D
_C___C_
__B_B__
___A___"""
        , skip <|
            test "Largest possible diamond" <|
                \() ->
                    Diamond.rows 'Z'
                        |> Expect.equal """_________________________A_________________________
________________________B_B________________________
_______________________C___C_______________________
______________________D_____D______________________
_____________________E_______E_____________________
____________________F_________F____________________
___________________G___________G___________________
__________________H_____________H__________________
_________________I_______________I_________________
________________J_________________J________________
_______________K___________________K_______________
______________L_____________________L______________
_____________M_______________________M_____________
____________N_________________________N____________
___________O___________________________O___________
__________P_____________________________P__________
_________Q_______________________________Q_________
________R_________________________________R________
_______S___________________________________S_______
______T_____________________________________T______
_____U_______________________________________U_____
____V_________________________________________V____
___W___________________________________________W___
__X_____________________________________________X__
_Y_______________________________________________Y_
Z_________________________________________________Z
_Y_______________________________________________Y_
__X_____________________________________________X__
___W___________________________________________W___
____V_________________________________________V____
_____U_______________________________________U_____
______T_____________________________________T______
_______S___________________________________S_______
________R_________________________________R________
_________Q_______________________________Q_________
__________P_____________________________P__________
___________O___________________________O___________
____________N_________________________N____________
_____________M_______________________M_____________
______________L_____________________L______________
_______________K___________________K_______________
________________J_________________J________________
_________________I_______________I_________________
__________________H_____________H__________________
___________________G___________G___________________
____________________F_________F____________________
_____________________E_______E_____________________
______________________D_____D______________________
_______________________C___C_______________________
________________________B_B________________________
_________________________A_________________________"""
        ]
